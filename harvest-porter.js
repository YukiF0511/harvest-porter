// „Éè„Éº„Éô„Çπ„Éà„Éª„Éù„Éº„Çø„Éº v2.1.1
// Ëæ≤Ê•≠ÁµåÂñ∂„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„Ç≤„Éº„É†
// Êõ¥Êñ∞ÂÜÖÂÆπ: „Éà„É©„ÇØ„Çø„ÉºÊìç‰ΩúÁîªÈù¢„ÅÆ„Ç®„É©„Éº‰øÆÊ≠£„ÄÅcargoÂàùÊúüÂåñÂá¶ÁêÜÊîπÂñÑ

console.log('üöú „Éè„Éº„Éô„Çπ„Éà„Éª„Éù„Éº„Çø„Éº v2.1.1 Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');

// ÊúÄÂ∞èÈôê„ÅÆ„Ç≤„Éº„É†„ÇØ„É©„ÇπÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
class HarvestPorterGame {
    constructor() {
        console.log('„Ç≤„Éº„É†ÂàùÊúüÂåñÈñãÂßã');
        this.version = '2.1.1';
        this.money = 1000;
        this.bankruptcyEnabled = false;
        this.isGameOver = false;
        
        this.fields = [
            { id: 0, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
            { id: 1, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
            { id: 2, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
            { id: 3, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
            { id: 4, state: 'empty', crop: null, plantTime: 0, growthTime: 0 }
        ];
        
        this.tractors = [
            { id: 0, capacity: 10, currentLoad: 0, state: 'idle', returnTime: 0, roundTripTime: 8000, cargo: [] }
        ];
        
        this.ownedSeeds = ['apple', 'orange'];
        this.selectedSeedType = 'apple';
        
        // ÂÄçÈÄüË®≠ÂÆö„ÇíËøΩÂä†
        this.gameSpeed = 1;
        this.speedMultiplier = 1;
        
        // Âä¥ÂÉçËÄÖ„Ç∑„Çπ„ÉÜ„É†„ÇíËøΩÂä†
        this.workers = [];
        this.currentWorkerId = 0;
        this.workerTypes = {
            planter: {
                name: '„ÅÜ„Åà„Å¶„Åï„Çì',
                icon: 'üë®‚Äçüåæ',
                hireCost: 200,
                wageCost: 50,
                description: '„Åò„Å©„ÅÜ„Å¶„Åç„Å´„Åü„Å≠„Çí„ÅÜ„Åà„Åæ„Åô'
            },
            harvester: {
                name: '„Åó„ÇÖ„ÅÜ„Åã„Åè„Åï„Çì',
                icon: 'üë©‚Äçüåæ',
                hireCost: 300,
                wageCost: 60,
                description: '„Åò„Å©„ÅÜ„Å¶„Åç„Å´„Åó„ÇÖ„ÅÜ„Åã„Åè„Åó„Åæ„Åô'
            },
            driver: {
                name: '„ÅÜ„Çì„Å¶„Çì„Åó„ÇÖ„Åï„Çì',
                icon: 'üöõ',
                hireCost: 500,
                wageCost: 80,
                description: '„Åæ„Çì„Åü„Çì„ÅÆ„Éà„É©„ÇØ„Çø„Éº„Çí„Åò„Å©„ÅÜ„Åó„ÇÖ„Å£„Åã„Åó„Åæ„Åô'
            }
        };
        
        console.log('Âä¥ÂÉçËÄÖ„Çø„Ç§„Éó„ÅåÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü:', Object.keys(this.workerTypes));
        
        this.cropData = {
            apple: { name: '„Çä„Çì„Åî', icon: 'üçé', seedPrice: 50, growthTime: 10000, sellPrice: 80, unlocked: true },
            orange: { name: '„Åø„Åã„Çì', icon: 'üçä', seedPrice: 30, growthTime: 8000, sellPrice: 50, unlocked: true },
            banana: { name: '„Éê„Éä„Éä', icon: 'üçå', seedPrice: 80, growthTime: 12000, sellPrice: 120, unlocked: false },
            grape: { name: '„Å∂„Å©„ÅÜ', icon: 'üçá', seedPrice: 100, growthTime: 15000, sellPrice: 150, unlocked: false },
            strawberry: { name: '„ÅÑ„Å°„Åî', icon: 'üçì', seedPrice: 60, growthTime: 9000, sellPrice: 90, unlocked: false },
            watermelon: { name: '„Åô„ÅÑ„Åã', icon: 'üçâ', seedPrice: 150, growthTime: 20000, sellPrice: 250, unlocked: false },
            corn: { name: '„Å®„ÅÜ„ÇÇ„Çç„Åì„Åó', icon: 'üåΩ', seedPrice: 40, growthTime: 11000, sellPrice: 70, unlocked: false },
            tomato: { name: '„Éà„Éû„Éà', icon: 'üçÖ', seedPrice: 35, growthTime: 7000, sellPrice: 60, unlocked: false }
        };
        
        console.log('„Ç≤„Éº„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
        this.init();
    }
    
    init() {
        console.log('initÈñãÂßã');
        this.loadGame(); // „Çª„Éº„Éñ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
        
        // Êó¢Â≠ò„ÅÆ„Éà„É©„ÇØ„Çø„Éº„Å´cargo„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÁ¢∫ÂÆü„Å´ËøΩÂä†
        this.tractors.forEach(tractor => {
            if (!tractor.cargo) {
                tractor.cargo = [];
                console.log(`„Éà„É©„ÇØ„Çø„Éº#${tractor.id}„Å´cargo„Éó„É≠„Éë„ÉÜ„Ç£„ÇíËøΩÂä†`);
            }
        });
        
        this.updateDisplay();
        this.renderFields(); // Áïë„ÅÆË°®Á§∫„ÇíËøΩÂä†
        this.renderTractors(); // „Éà„É©„ÇØ„Çø„Éº„ÅÆË°®Á§∫„ÇíËøΩÂä†
        this.renderSeedSelector(); // Á®ÆÈÅ∏Êäû„ÅÆË°®Á§∫„ÇíËøΩÂä†
        this.renderWorkers(); // Âä¥ÂÉçËÄÖ„ÅÆË°®Á§∫„ÇíËøΩÂä†
        this.updateBankruptcyToggleButton(); // Á†¥Áî£„Ç∑„Çπ„ÉÜ„É†„Éú„Çø„É≥„ÅÆË°®Á§∫„ÇíÊõ¥Êñ∞
        this.startGameLoop(); // „Ç≤„Éº„É†„É´„Éº„Éó„ÇíÈñãÂßã
        console.log('initÂÆå‰∫Ü');
    }
    
    // „Ç≤„Éº„É†„É´„Éº„Éó
    startGameLoop() {
        setInterval(() => {
            this.updateTractors();
            this.updateWorkers(); // Âä¥ÂÉçËÄÖ„ÅÆÂá¶ÁêÜ„ÇíËøΩÂä†
            this.renderTractors(); // „Éà„É©„ÇØ„Çø„ÉºË°®Á§∫„ÇíÂÆöÊúüÊõ¥Êñ∞
        }, 1000); // 1Áßí„Åî„Å®„Å´Êõ¥Êñ∞
        
        // Ëá™Âãï„Çª„Éº„ÉñÔºà30Áßí„Åî„Å®Ôºâ
        setInterval(() => {
            this.saveGame(false); // Ëá™Âãï„Çª„Éº„Éñ„Åß„ÅØÈÄöÁü•„ÇíË°®Á§∫„Åó„Å™„ÅÑ
        }, 30000);
        
        // Áµ¶ÊñôÊîØÊâï„ÅÑÔºà60Áßí„Åî„Å®Ôºâ
        setInterval(() => {
            this.payWages();
        }, 60000);
        
        // „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíË°®Á§∫
        this.showVersionInfo();
    }
    
    // „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±Ë°®Á§∫
    showVersionInfo() {
        console.log(`%cüöú „Éè„Éº„Éô„Çπ„Éà„Éª„Éù„Éº„Çø„Éº v${this.version}`, 'color: #2d4a22; font-size: 16px; font-weight: bold;');
        console.log('Êõ¥Êñ∞ÂÜÖÂÆπ: „Éà„É©„ÇØ„Çø„ÉºÊìç‰ΩúÈõ£ÊòìÂ∫¶Ë™øÊï¥„ÄÅ„ÅäÈáë„Ç¢„Ç§„ÉÜ„É†ËøΩÂä†„ÄÅ„Éà„É©„ÇØ„Çø„ÉºÈÅãËª¢ÊâãÊîπÂñÑ');
        
        // ÂàùÂõûËµ∑ÂãïÊôÇ„ÅÆ„ÅøÈÄöÁü•„ÇíË°®Á§∫
        if (!localStorage.getItem('harvestPorterVersionShown_' + this.version)) {
            setTimeout(() => {
                this.showNotification(`üéâ v${this.version} „Å´„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÔºÅÊñ∞Ê©üËÉΩ„ÅåËøΩÂä†„Åï„Çå„Åæ„Åó„Åü`, 'info');
            }, 2000);
            localStorage.setItem('harvestPorterVersionShown_' + this.version, 'true');
        }
    }
    
    // „Éà„É©„ÇØ„Çø„ÉºÁä∂ÊÖãÊõ¥Êñ∞
    updateTractors() {
        this.tractors.forEach(tractor => {
            if (tractor.state === 'transporting' && tractor.returnTime <= Date.now()) {
                // Âá∫Ëç∑ÂÆå‰∫ÜÂá¶ÁêÜ„ÅØÊó¢„Å´setTimeout„ÅßÂá¶ÁêÜ„Åï„Çå„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅ„Åì„Åì„Åß„ÅØÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ„ÅÆ„Åø
                // Ë°®Á§∫Êõ¥Êñ∞„ÅÆ„Åü„ÇÅ„ÅÆ„Éà„É™„Ç¨„Éº
            }
        });
    }
    
    updateDisplay() {
        const moneyElement = document.getElementById('money');
        if (moneyElement) {
            moneyElement.textContent = this.money;
        }
    }
    
    // Áïë„ÅÆË°®Á§∫Ê©üËÉΩÔºàÂÖÉ„ÅÆ„Éá„Ç∂„Ç§„É≥„ÇíÂæ©ÂÖÉÔºâ
    renderFields() {
        const container = document.getElementById('fields-container');
        if (!container) {
            console.log('fields-container „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        // Êó¢Â≠ò„ÅÆÁïëË¶ÅÁ¥†„ÇíÊõ¥Êñ∞„Åô„Çã„Åã„ÄÅÊñ∞„Åó„Åè‰ΩúÊàê„Åô„Çã
        this.fields.forEach(field => {
            let fieldElement = container.querySelector(`[data-field-id="${field.id}"]`);
            
            if (!fieldElement) {
                // Êñ∞„Åó„ÅÑÁïëË¶ÅÁ¥†„Çí‰ΩúÊàê
                fieldElement = document.createElement('div');
                fieldElement.dataset.fieldId = field.id;
                // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„Çí‰∏ÄÂ∫¶„Å†„ÅëË®≠ÂÆö
                fieldElement.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.handleFieldClick(field.id);
                });
                container.appendChild(fieldElement);
            }
            
            // „ÇØ„É©„ÇπÂêç„ÇíÊõ¥Êñ∞
            fieldElement.className = `field ${field.state}`;
            
            let content = '';
            let progressBar = '';
            
            switch (field.state) {
                case 'empty':
                    content = '<div class="field-content">‚ûï</div>';
                    break;
                case 'planted':
                    const crop = this.cropData[field.crop];
                    const elapsed = Date.now() - field.plantTime;
                    const progress = Math.min((elapsed / field.growthTime) * 100, 100);
                    content = `<div class="field-content">${crop.icon}</div>`;
                    progressBar = `
                        <div class="field-progress">
                            <div class="progress-bar" style="width: ${progress}%"></div>
                        </div>
                    `;
                    break;
                case 'ready':
                    const readyCrop = this.cropData[field.crop];
                    content = `
                        <div class="harvest-arrow">‚¨áÔ∏è</div>
                        <div class="field-content">${readyCrop.icon}</div>
                    `;
                    break;
            }
            
            fieldElement.innerHTML = content + progressBar;
        });
        
        console.log('Áïë„ÅÆË°®Á§∫ÂÆå‰∫ÜÔºàÂÖÉ„ÅÆ„Éá„Ç∂„Ç§„É≥Ôºâ');
    }
    
    // „Éà„É©„ÇØ„Çø„Éº„ÅÆË°®Á§∫Ê©üËÉΩ
    renderTractors() {
        const container = document.getElementById('tractors-container');
        if (!container) {
            console.log('tractors-container „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        container.innerHTML = '';
        
        this.tractors.forEach(tractor => {
            const tractorElement = document.createElement('div');
            tractorElement.className = `tractor ${tractor.state}`;
            
            const capacityPercent = (tractor.currentLoad / tractor.capacity) * 100;
            let statusText = tractor.state === 'idle' ? '„Åü„ÅÑ„Åç„Å°„ÇÖ„ÅÜ' : '„ÅÜ„Çì„Å±„Çì„Å°„ÇÖ„ÅÜ';
            let timerText = '';
            let controlButton = '';
            
            console.log(`„Éà„É©„ÇØ„Çø„Éº #${tractor.id + 1} - Áä∂ÊÖã: ${tractor.state}, Á©çËºâ: ${tractor.currentLoad}/${tractor.capacity}`);
            
            if (tractor.state === 'transporting') {
                const remaining = Math.max(0, tractor.returnTime - Date.now());
                const seconds = Math.ceil(remaining / 1000);
                timerText = `<div class="timer">‚è∞ „ÇÇ„Å©„Çã„Åæ„Åß: ${seconds}„Å≥„Çá„ÅÜ</div>`;
            } else if (tractor.currentLoad > 0) {
                // Á©çËºâ„Åå„ÅÇ„ÇãÂæÖÊ©ü‰∏≠„ÅÆ„Éà„É©„ÇØ„Çø„Éº„Å´„ÅØÊìç‰Ωú„Éú„Çø„É≥„ÇíË°®Á§∫
                controlButton = `<button class="tractor-control-btn" onclick="openTractorControl(${tractor.id})">üéÆ „Åù„ÅÜ„Åï (${tractor.currentLoad}„Åì)</button>`;
                console.log('Êìç‰Ωú„Éú„Çø„É≥„ÇíË°®Á§∫:', tractor.id, tractor.currentLoad);
            } else {
                // Á©∫„ÅÆÂæÖÊ©ü‰∏≠„Éà„É©„ÇØ„Çø„Éº
                controlButton = `<div class="tractor-empty">„Å§„Åø„Å´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>`;
            }
            
            tractorElement.innerHTML = `
                <div class="tractor-header">
                    <span>üöú „Éà„É©„ÇØ„Çø„Éº #${tractor.id + 1}</span>
                    <span class="tractor-status ${tractor.state}">${statusText}</span>
                </div>
                <div class="capacity-bar">
                    <div class="capacity-fill" style="width: ${capacityPercent}%">
                        ${tractor.currentLoad}/${tractor.capacity}
                    </div>
                </div>
                ${timerText}
                ${controlButton}
            `;
            
            container.appendChild(tractorElement);
        });
        
        console.log('„Éà„É©„ÇØ„Çø„Éº„ÅÆË°®Á§∫ÂÆå‰∫Ü');
    }
    
    // Á®ÆÈÅ∏ÊäûÊ©üËÉΩ
    renderSeedSelector() {
        const container = document.getElementById('seed-selector');
        if (!container) {
            console.log('seed-selector „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        container.innerHTML = '';
        
        console.log('Á®ÆÈÅ∏ÊäûUIÊèèÁîª:', this.ownedSeeds, 'ÈÅ∏Êäû‰∏≠:', this.selectedSeedType);
        
        this.ownedSeeds.forEach(seedKey => {
            const crop = this.cropData[seedKey];
            const option = document.createElement('div');
            const isSelected = seedKey === this.selectedSeedType;
            option.className = `seed-selector-option ${isSelected ? 'selected' : ''}`;
            option.dataset.seed = seedKey;
            
            console.log(`Á®Æ„Ç™„Éó„Ç∑„Éß„É≥‰ΩúÊàê: ${seedKey}, ÈÅ∏ÊäûÁä∂ÊÖã: ${isSelected}`);
            
            // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„Çí‰ΩøÁî®„Åó„Å¶„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ„ÇíÊîπÂñÑ
            option.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Á®Æ„Ç™„Éó„Ç∑„Éß„É≥„ÇØ„É™„ÉÉ„ÇØ:', seedKey);
                this.selectSeedType(seedKey);
            });
            
            option.innerHTML = `
                <div class="seed-icon">${crop.icon}</div>
                <div class="seed-info">
                    <div class="seed-name">${crop.name}</div>
                    <div class="seed-price">${crop.seedPrice} G</div>
                </div>
            `;
            
            container.appendChild(option);
        });
        
        console.log('Á®ÆÈÅ∏Êäû„ÅÆË°®Á§∫ÂÆå‰∫Ü');
    }
    
    // Á®ÆÈÅ∏ÊäûÂá¶ÁêÜ
    selectSeedType(seedKey) {
        console.log('Á®ÆÈÅ∏Êäû:', seedKey);
        this.selectedSeedType = seedKey;
        this.renderSeedSelector(); // Ë°®Á§∫„ÇíÊõ¥Êñ∞
        
        const crop = this.cropData[seedKey];
        this.showNotification(`${crop.icon} ${crop.name}„Çí„Åà„Çâ„Å≥„Åæ„Åó„Åü`, 'info');
    }
    
    // Áïë„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ
    handleFieldClick(fieldId) {
        const field = this.fields[fieldId];
        console.log(`Áïë ${fieldId} „Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü„ÄÇÁä∂ÊÖã: ${field.state}`);
        
        if (field.state === 'empty') {
            // Á©∫„ÅÆÁïë„ÅÆÂ†¥Âêà„ÄÅÁ®Æ„ÇíÊ§ç„Åà„Çã
            this.plantSeed(fieldId);
        } else if (field.state === 'ready') {
            // ÂèéÁ©´ÂèØËÉΩ„Å™Â†¥Âêà„ÄÅÂèéÁ©´„Åô„Çã
            this.harvestField(fieldId);
        } else {
            this.showNotification('„Åæ„Å†„Åó„ÇÖ„ÅÜ„Åã„Åè„Åß„Åç„Åæ„Åõ„Çì', 'info');
        }
    }
    
    // Á®ÆÊ§ç„ÅàÊ©üËÉΩ
    plantSeed(fieldId) {
        const field = this.fields[fieldId];
        const crop = this.cropData[this.selectedSeedType];
        
        if (this.money >= crop.seedPrice) {
            this.money -= crop.seedPrice;
            field.state = 'planted';
            field.crop = this.selectedSeedType;
            field.plantTime = Date.now();
            field.growthTime = crop.growthTime;
            
            this.showNotification(`${crop.name}„ÅÆ„Åü„Å≠„Çí„ÅÜ„Åà„Åæ„Åó„ÅüÔºÅ`, 'success');
            this.updateDisplay();
            this.renderFields();
            
            // ÊàêÈï∑„Çø„Ç§„Éû„Éº„ÇíÈñãÂßãÔºàÂÄçÈÄü„ÇíÈÅ©Áî®Ôºâ
            const adjustedGrowthTime = crop.growthTime / this.speedMultiplier;
            setTimeout(() => {
                this.growCrop(fieldId);
            }, adjustedGrowthTime);
            
        } else {
            this.showNotification('„Åä„Åã„Å≠„Åå„Åü„Çä„Åæ„Åõ„ÇìÔºÅ', 'error');
        }
    }
    
    // ‰ΩúÁâ©ÊàêÈï∑Âá¶ÁêÜ
    growCrop(fieldId) {
        const field = this.fields[fieldId];
        if (field.state === 'planted') {
            field.state = 'ready';
            const crop = this.cropData[field.crop];
            this.showNotification(`üåæ ${crop.name}„Åå„Åó„ÇÖ„ÅÜ„Åã„Åè„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åó„ÅüÔºÅ`, 'success');
            this.renderFields();
        }
    }
    
    // ÂèéÁ©´Ê©üËÉΩ
    harvestField(fieldId) {
        const field = this.fields[fieldId];
        const crop = this.cropData[field.crop];
        
        console.log('ÂèéÁ©´ÈñãÂßã:', fieldId, crop.name);
        console.log('ÂèéÁ©´Ââç„ÅÆ„Éà„É©„ÇØ„Çø„ÉºÁä∂ÊÖã:', this.tractors);
        
        // Âà©Áî®ÂèØËÉΩ„Å™„Éà„É©„ÇØ„Çø„Éº„ÇíÊé¢„Åô
        const availableTractor = this.tractors.find(t => t.state === 'idle' && t.currentLoad < t.capacity);
        console.log('Âà©Áî®ÂèØËÉΩ„Å™„Éà„É©„ÇØ„Çø„Éº:', availableTractor);
        
        if (availableTractor) {
            // „Éà„É©„ÇØ„Çø„Éº„Å´Á©ç„ÅøËæº„Åø
            availableTractor.currentLoad += 1;
            availableTractor.cargo.push({
                cropType: field.crop,
                sellPrice: crop.sellPrice
            });
            console.log('„Éà„É©„ÇØ„Çø„Éº„Å´Á©ç„ÅøËæº„ÅøÂÆå‰∫Ü„ÄÇÊñ∞„Åó„ÅÑÁ©çËºâÈáè:', availableTractor.currentLoad);
            console.log('Á©çËºâÂÜÖÂÆπ:', availableTractor.cargo);
            
            // Áïë„Çí„É™„Çª„ÉÉ„Éà
            field.state = 'empty';
            field.crop = null;
            field.plantTime = 0;
            field.growthTime = 0;
            
            this.showNotification(`‚úÖ ${crop.name}„Çí„Åó„ÇÖ„ÅÜ„Åã„Åè„Åó„Åæ„Åó„ÅüÔºÅ„Éà„É©„ÇØ„Çø„Éº„Å´„Å§„Åø„Åì„Åø„Åæ„Åó„Åü`, 'success');
            
            // „Éà„É©„ÇØ„Çø„Éº„ÅåÊ∫ÄËºâ„Å´„Å™„Å£„Åü„ÇâËá™ÂãïÂá∫Ëç∑„ÅÆÊèêÊ°à„Åæ„Åü„ÅØËá™ÂãïÂÆüË°å
            if (availableTractor.currentLoad >= availableTractor.capacity) {
                // „Éà„É©„ÇØ„Çø„ÉºÈÅãËª¢Êâã„Åå„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                const driverWorker = this.workers.find(w => w.type === 'driver' && w.isActive);
                if (driverWorker) {
                    // ÈÅãËª¢Êâã„Åå„ÅÑ„ÇãÂ†¥Âêà„ÅØËá™ÂãïÂá∫Ëç∑
                    this.startSimpleDelivery(availableTractor.id);
                    this.showNotification(`üöõ ÈÅãËª¢Êâã„Åå„Éà„É©„ÇØ„Çø„Éº„ÇíËá™ÂãïÂá∫Ëç∑„Åó„Åæ„Åó„ÅüÔºÅ`, 'success');
                } else {
                    // ÈÅãËª¢Êâã„Åå„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÊâãÂãïÊìç‰Ωú„Çí‰øÉ„Åô
                    this.showNotification(`üöú „Éà„É©„ÇØ„Çø„Éº„Åå„Åæ„Çì„Åï„ÅÑ„Åß„ÅôÔºÅ„Åù„ÅÜ„Åï„Åó„Å¶„Åó„ÇÖ„Å£„Åã„Åó„Åæ„Åó„Çá„ÅÜ`, 'info');
                }
            }
        } else {
            console.log('Âà©Áî®ÂèØËÉΩ„Å™„Éà„É©„ÇØ„Çø„Éº„Åå„Å™„ÅÑ„Åü„ÇÅÁõ¥Êé•Ë≤©Â£≤');
            // „Éà„É©„ÇØ„Çø„Éº„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÁõ¥Êé•Ë≤©Â£≤
            this.money += crop.sellPrice;
            
            field.state = 'empty';
            field.crop = null;
            field.plantTime = 0;
            field.growthTime = 0;
            
            this.showNotification(`‚úÖ ${crop.name}„Çí„Åó„ÇÖ„ÅÜ„Åã„Åè„Åó„Åæ„Åó„ÅüÔºÅ +${crop.sellPrice}G`, 'success');
        }
        
        console.log('ÂèéÁ©´Âæå„ÅÆ„Éà„É©„ÇØ„Çø„ÉºÁä∂ÊÖã:', this.tractors);
        
        this.updateDisplay();
        this.renderFields();
        this.renderTractors(); // „Éà„É©„ÇØ„Çø„ÉºË°®Á§∫„ÇíÊõ¥Êñ∞
    }
    
    showNotification(message, type = 'info') {
        console.log(`ÈÄöÁü•: ${message} (${type})`);
        
        // ÈÄöÁü•Ë°®Á§∫Ê©üËÉΩ„ÇíËøΩÂä†
        const container = document.getElementById('notification-container');
        if (container) {
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            
            // „Çª„Éº„ÉñÈÄöÁü•„ÅÆÂ†¥Âêà„ÅØÁâπÂà•„Å™„Çπ„Çø„Ç§„É´„ÇíËøΩÂä†
            if (message.includes('„Åª„Åû„Çì')) {
                notification.classList.add('save-notification');
                notification.innerHTML = `
                    <div class="notification-icon">üíæ</div>
                    <div class="notification-text">${message}</div>
                `;
            }
            
            container.appendChild(notification);
            
            // „Çª„Éº„ÉñÈÄöÁü•„ÅØ5Áßí„ÄÅ„Åù„ÅÆ‰ªñ„ÅØ3Áßí„ÅßÂâäÈô§
            const displayTime = message.includes('„Åª„Åû„Çì') ? 5000 : 3000;
            setTimeout(() => {
                if (container.contains(notification)) {
                    notification.classList.add('fade-out');
                    setTimeout(() => {
                        if (container.contains(notification)) {
                            container.removeChild(notification);
                        }
                    }, 300);
                }
            }, displayTime);
        }
    }
    
    // HTML„Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„ÇãÈñ¢Êï∞„ÇíËøΩÂä†
    saveGame(showNotification = true) {
        const saveData = {
            money: this.money,
            fields: this.fields,
            tractors: this.tractors,
            workers: this.workers,
            currentWorkerId: this.currentWorkerId,
            ownedSeeds: this.ownedSeeds,
            selectedSeedType: this.selectedSeedType,
            bankruptcyEnabled: this.bankruptcyEnabled,
            gameSpeed: this.gameSpeed,
            speedMultiplier: this.speedMultiplier,
            saveTime: Date.now()
        };
        
        try {
            localStorage.setItem('harvestPorterSave', JSON.stringify(saveData));
            if (showNotification) {
                this.showNotification('üíæ „Ç≤„Éº„É†„Çí„Åª„Åû„Çì„Åó„Åæ„Åó„ÅüÔºÅ', 'success');
                console.log('ÊâãÂãï„Çª„Éº„ÉñÂÆå‰∫Ü:', saveData);
            } else {
                console.log('Ëá™Âãï„Çª„Éº„ÉñÂÆå‰∫Ü');
            }
        } catch (error) {
            console.error('„Çª„Éº„Éñ„Ç®„É©„Éº:', error);
            if (showNotification) {
                this.showNotification('‚ùå „Çª„Éº„Éñ„Å´„Åó„Å£„Å±„ÅÑ„Åó„Åæ„Åó„Åü', 'error');
            }
        }
    }
    
    loadGame() {
        try {
            const saveData = localStorage.getItem('harvestPorterSave');
            if (saveData) {
                const data = JSON.parse(saveData);
                console.log('„É≠„Éº„Éâ„Éá„Éº„Çø:', data);
                
                // „Éá„Éº„Çø„ÇíÂæ©ÂÖÉ
                this.money = data.money || 1000;
                this.fields = data.fields || [
                    { id: 0, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
                    { id: 1, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
                    { id: 2, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
                    { id: 3, state: 'empty', crop: null, plantTime: 0, growthTime: 0 },
                    { id: 4, state: 'empty', crop: null, plantTime: 0, growthTime: 0 }
                ];
                this.tractors = data.tractors || [
                    { id: 0, capacity: 10, currentLoad: 0, state: 'idle', returnTime: 0, roundTripTime: 8000, cargo: [] }
                ];
                
                // Âè§„ÅÑ„Çª„Éº„Éñ„Éá„Éº„ÇøÂØæÂøúÔºöcargo„Éó„É≠„Éë„ÉÜ„Ç£„Åå„Å™„ÅÑ„Éà„É©„ÇØ„Çø„Éº„Å´ËøΩÂä†
                this.tractors.forEach(tractor => {
                    if (!tractor.cargo) {
                        tractor.cargo = [];
                    }
                });
                this.workers = data.workers || [];
                this.currentWorkerId = data.currentWorkerId || 0;
                this.ownedSeeds = data.ownedSeeds || ['apple', 'orange'];
                this.selectedSeedType = data.selectedSeedType || 'apple';
                this.bankruptcyEnabled = data.bankruptcyEnabled || false;
                this.gameSpeed = data.gameSpeed || 1;
                this.speedMultiplier = data.speedMultiplier || 1;
                
                // ÈÄ≤Ë°å‰∏≠„ÅÆ‰ΩúÁâ©„ÅÆÊàêÈï∑„Çø„Ç§„Éû„Éº„ÇíÂæ©ÂÖÉ
                this.restoreGrowthTimers();
                
                // ÈÄ≤Ë°å‰∏≠„ÅÆ„Éà„É©„ÇØ„Çø„ÉºÈÖçÈÄÅ„ÇíÂæ©ÂÖÉ
                this.restoreTractorTimers();
                
                console.log('„É≠„Éº„ÉâÂÆå‰∫Ü');
                this.showNotification('üìÇ „Çª„Éº„Éñ„Éá„Éº„Çø„Çí„Çà„Åø„Åì„Åø„Åæ„Åó„ÅüÔºÅ', 'success');
            } else {
                console.log('„Çª„Éº„Éñ„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇÂàùÊúüÁä∂ÊÖã„ÅßÈñãÂßã„Åó„Åæ„Åô„ÄÇ');
            }
        } catch (error) {
            console.error('„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
            this.showNotification('‚ùå „É≠„Éº„Éâ„Å´„Åó„Å£„Å±„ÅÑ„Åó„Åæ„Åó„Åü', 'error');
        }
    }
    
    // ‰ΩúÁâ©„ÅÆÊàêÈï∑„Çø„Ç§„Éû„Éº„ÇíÂæ©ÂÖÉ
    restoreGrowthTimers() {
        this.fields.forEach((field, fieldId) => {
            if (field.state === 'planted' && field.plantTime && field.growthTime) {
                const elapsed = Date.now() - field.plantTime;
                const adjustedGrowthTime = field.growthTime / this.speedMultiplier;
                const remaining = adjustedGrowthTime - elapsed;
                
                if (remaining > 0) {
                    // „Åæ„Å†ÊàêÈï∑‰∏≠
                    setTimeout(() => {
                        this.growCrop(fieldId);
                    }, remaining);
                } else {
                    // Êó¢„Å´ÊàêÈï∑ÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã
                    field.state = 'ready';
                }
            }
        });
    }
    
    // „Éà„É©„ÇØ„Çø„Éº„ÅÆÈÖçÈÄÅ„Çø„Ç§„Éû„Éº„ÇíÂæ©ÂÖÉ
    restoreTractorTimers() {
        this.tractors.forEach((tractor, tractorId) => {
            if (tractor.state === 'transporting' && tractor.returnTime) {
                const remaining = tractor.returnTime - Date.now();
                
                if (remaining > 0) {
                    // „Åæ„Å†ÈÖçÈÄÅ‰∏≠
                    const earnings = this.calculateCargoValue(tractor);
                    setTimeout(() => {
                        this.completeDelivery(tractorId, earnings);
                    }, remaining);
                } else {
                    // Êó¢„Å´ÈÖçÈÄÅÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã
                    const earnings = this.calculateCargoValue(tractor);
                    this.completeDelivery(tractorId, earnings);
                }
            }
        });
    }
    
    resetGame() {
        if (confirm('Êú¨ÂΩì„Å´„Ç≤„Éº„É†„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô„ÅãÔºü„Åô„Åπ„Å¶„ÅÆÈÄ≤Ë°åÁä∂Ê≥Å„ÅåÂ§±„Çè„Çå„Åæ„Åô„ÄÇ')) {
            localStorage.removeItem('harvestPorterSave');
            this.showNotification('üóëÔ∏è „Ç≤„Éº„É†„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü', 'info');
            setTimeout(() => {
                location.reload();
            }, 1000);
        }
    }
    
    toggleBankruptcySystem() {
        this.bankruptcyEnabled = !this.bankruptcyEnabled;
        console.log('Á†¥Áî£„Ç∑„Çπ„ÉÜ„É†:', this.bankruptcyEnabled ? 'ON' : 'OFF');
        this.showNotification(`„ÅØ„Åï„Çì„Ç∑„Çπ„ÉÜ„É†„Çí${this.bankruptcyEnabled ? 'ON' : 'OFF'}„Å´„Åó„Åæ„Åó„Åü`, 'info');
        this.updateBankruptcyToggleButton();
    }
    
    updateBankruptcyToggleButton() {
        const toggleButton = document.getElementById('bankruptcy-toggle');
        if (toggleButton) {
            toggleButton.textContent = this.bankruptcyEnabled ? 
                'üí∏ „ÅØ„Åï„Çì„Ç∑„Çπ„ÉÜ„É†: ON' : 
                'üí∞ „ÅØ„Åï„Çì„Ç∑„Çπ„ÉÜ„É†: OFF';
            toggleButton.className = this.bankruptcyEnabled ? 
                'menu-btn bankruptcy-on' : 
                'menu-btn bankruptcy-off';
        }
    }
    
    // „Éà„É©„ÇØ„Çø„Éº„ÅÆÁ©çËºâ‰æ°ÂÄ§„ÇíË®àÁÆó
    calculateCargoValue(tractor) {
        console.log('calculateCargoValue called with:', tractor);
        
        if (!tractor) {
            console.warn('„Éà„É©„ÇØ„Çø„Éº„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì');
            return 0;
        }
        
        if (!tractor.cargo || tractor.cargo.length === 0) {
            // Âè§„ÅÑ„Çª„Éº„Éñ„Éá„Éº„ÇøÂØæÂøúÔºöcargo„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ80GÂõ∫ÂÆö„ÅßË®àÁÆó
            console.log('cargo„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Åü„ÇÅ„ÄÅÂõ∫ÂÆö‰æ°Ê†º„ÅßË®àÁÆó:', tractor.currentLoad * 80);
            return tractor.currentLoad * 80;
        }
        
        const totalValue = tractor.cargo.reduce((total, item) => total + item.sellPrice, 0);
        console.log('cargo‰æ°ÂÄ§Ë®àÁÆóÁµêÊûú:', totalValue);
        return totalValue;
    }
    
    // Á∞°ÂçòÂá∫Ëç∑Ê©üËÉΩ
    startSimpleDelivery(tractorId) {
        const tractor = this.tractors.find(t => t.id === tractorId);
        if (!tractor || tractor.state !== 'idle' || tractor.currentLoad === 0) {
            this.showNotification('üöú „Åó„ÇÖ„Å£„Åã„Åß„Åç„Åæ„Åõ„Çì', 'error');
            return;
        }
        
        // Âá∫Ëç∑ÈñãÂßã
        const earnings = this.calculateCargoValue(tractor); // ÂÆüÈöõ„ÅÆ‰ΩúÁâ©‰æ°Ê†º„ÅßË®àÁÆó
        tractor.state = 'transporting';
        
        // ÂÄçÈÄü„ÇíÈÅ©Áî®„Åó„ÅüÈÅãÊê¨ÊôÇÈñì
        const adjustedRoundTripTime = tractor.roundTripTime / this.speedMultiplier;
        tractor.returnTime = Date.now() + adjustedRoundTripTime;
        
        this.showNotification(`üöö „Éà„É©„ÇØ„Çø„Éº„Åå„Åó„ÇÖ„Å£„Åã„Å´„Åß„Åã„Åë„Åæ„Åó„ÅüÔºÅ ${adjustedRoundTripTime / 1000}„Å≥„Çá„ÅÜ„Åß„ÇÇ„Å©„Çä„Åæ„Åô`, 'success');
        
        // Âá∫Ëç∑ÂÆå‰∫Ü„Çø„Ç§„Éû„Éº
        setTimeout(() => {
            this.completeDelivery(tractorId, earnings);
        }, adjustedRoundTripTime);
        
        // Ë°®Á§∫„ÇíÊõ¥Êñ∞
        this.renderTractors();
        
        // „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
        closeTractorControl();
    }
    
    // Âá∫Ëç∑ÂÆå‰∫ÜÂá¶ÁêÜ
    completeDelivery(tractorId, earnings) {
        const tractor = this.tractors[tractorId];
        if (!tractor) return;
        
        // „Éà„É©„ÇØ„Çø„Éº„Çí„É™„Çª„ÉÉ„Éà
        tractor.state = 'idle';
        tractor.currentLoad = 0;
        tractor.returnTime = 0;
        tractor.cargo = []; // Á©çËºâÂÜÖÂÆπ„Çí„ÇØ„É™„Ç¢
        
        // „ÅäÈáë„ÇíËøΩÂä†
        this.money += earnings;
        
        this.showNotification(`üí∞ „Åó„ÇÖ„Å£„Åã„Åã„Çì„Çä„Çá„ÅÜÔºÅ +${earnings}G`, 'success');
        
        // Ë°®Á§∫„ÇíÊõ¥Êñ∞
        this.updateDisplay();
        this.renderTractors();
    }
    
    // ÂÄçÈÄüÊ©üËÉΩ
    toggleGameSpeed() {
        const speeds = [1, 2, 4, 8];
        const currentIndex = speeds.indexOf(this.gameSpeed);
        const nextIndex = (currentIndex + 1) % speeds.length;
        
        this.gameSpeed = speeds[nextIndex];
        this.speedMultiplier = this.gameSpeed;
        
        // „Éú„Çø„É≥„ÅÆË°®Á§∫„ÇíÊõ¥Êñ∞
        const speedText = document.getElementById('speed-text');
        const speedBtn = document.getElementById('speed-toggle-btn');
        
        if (speedText && speedBtn) {
            speedText.textContent = `${this.gameSpeed}x`;
            
            // „Éú„Çø„É≥„ÅÆ„ÇØ„É©„Çπ„ÇíÊõ¥Êñ∞
            speedBtn.className = 'speed-toggle-btn';
            if (this.gameSpeed === 2) speedBtn.classList.add('speed-2x');
            else if (this.gameSpeed === 4) speedBtn.classList.add('speed-4x');
            else if (this.gameSpeed === 8) speedBtn.classList.add('speed-8x');
        }
        
        // ÈÄöÁü•„ÇíË°®Á§∫
        this.showNotification(`‚ö° „Ç≤„Éº„É†ÈÄüÂ∫¶: ${this.gameSpeed}x`, 'info');
    }
    
    // ÊâãÂãï„Éà„É©„ÇØ„Çø„ÉºÈÅãËª¢„Ç≤„Éº„É†ÈñãÂßã
    startTractorGame(tractorId) {
        const tractor = this.tractors[tractorId];
        if (!tractor || tractor.state !== 'idle' || tractor.currentLoad === 0) {
            this.showNotification('üöú „ÅÜ„Çì„Å¶„Çì„Åß„Åç„Åæ„Åõ„Çì', 'error');
            return;
        }
        
        // „Éà„É©„ÇØ„Çø„Éº„ÇíÈÅãÊê¨‰∏≠Áä∂ÊÖã„Å´„Åô„Çã
        tractor.state = 'transporting';
        const earnings = tractor.currentLoad * 80;
        
        // Á∞°ÂçòÂá∫Ëç∑„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÇíÈö†„Åó„Å¶„Ç≤„Éº„É†ÁîªÈù¢„ÇíË°®Á§∫
        const modal = document.getElementById('tractor-control-modal');
        const deliveryInterface = modal.querySelector('.delivery-interface');
        const canvas = modal.querySelector('#tractor-canvas');
        const instructions = modal.querySelector('.control-instructions');
        const stats = modal.querySelector('.game-stats');
        
        if (deliveryInterface) deliveryInterface.style.display = 'none';
        if (canvas) canvas.style.display = 'block';
        if (instructions) {
            instructions.style.display = 'block';
            // Êìç‰ΩúË™¨Êòé„ÇíÊõ¥Êñ∞
            instructions.innerHTML = `
                <p>üì± „Çø„ÉÉ„ÉÅ/„Éû„Ç¶„ÇπÁßªÂãï: ‰∏ä‰∏ãÊìç‰Ωú</p>
                <p>‚ö° „Ç¢„ÇØ„Çª„É´: Ëá™ÂãïÔºàÁáÉÊñô„Åå„ÅÇ„ÇãÈôê„ÇäÂä†ÈÄüÔºâ</p>
                <p>‚å®Ô∏è „Ç≠„Éº„Éú„Éº„Éâ: ‚Üë‚Üì „Åæ„Åü„ÅØ WASD „Åß‰∏ä‰∏ãÁßªÂãï</p>
                <p>üéØ ÁõÆÊ®ô: ÈöúÂÆ≥Áâ©„ÇíÈÅø„Åë„Å¶„Ç¥„Éº„É´ÂÄâÂ∫´„Å´Âà∞ÈÅîÔºÅ</p>
            `;
        }
        if (stats) stats.style.display = 'block';
        
        // „Éà„É©„ÇØ„Çø„Éº„Éü„Éã„Ç≤„Éº„É†„ÇíÈñãÂßã
        this.currentTractorGame = new TractorMiniGame(tractor, (success, finalLoad, bonusMoney) => {
            this.completeTractorGame(tractorId, success, finalLoad, earnings, bonusMoney);
        });
        
        this.showNotification('üöú „ÅÜ„Çì„Å¶„Çì„Åã„ÅÑ„ÅóÔºÅ„Åå„Çì„Å∞„Å£„Å¶ÔºÅ', 'success');
        this.renderTractors(); // „Éà„É©„ÇØ„Çø„ÉºË°®Á§∫„ÇíÊõ¥Êñ∞
    }
    
    // „Éà„É©„ÇØ„Çø„Éº„Ç≤„Éº„É†ÂÆå‰∫ÜÂá¶ÁêÜ
    completeTractorGame(tractorId, success, finalLoad, baseEarnings, bonusMoney = 0) {
        const tractor = this.tractors[tractorId];
        if (!tractor) return;
        
        // „Éà„É©„ÇØ„Çø„Éº„Çí„É™„Çª„ÉÉ„Éà
        tractor.state = 'idle';
        tractor.currentLoad = 0;
        tractor.returnTime = 0;
        tractor.cargo = []; // Á©çËºâÂÜÖÂÆπ„Çí„ÇØ„É™„Ç¢
        
        let earnings = 0;
        if (success) {
            // ÊàêÂäüÊôÇ„ÅØÂÆüÈöõ„ÅÆË≤®Áâ©‰æ°ÂÄ§ + ÈÅãËª¢„Éú„Éº„Éä„Çπ + Êãæ„Å£„Åü„ÅäÈáë
            const cargoValue = this.calculateCargoValue(tractor) || (finalLoad * 80);
            const drivingBonus = finalLoad * 20; // ÈÅãËª¢„Éú„Éº„Éä„Çπ20G/ÂÄã
            earnings = cargoValue + drivingBonus + bonusMoney;
            this.showNotification(`üéâ „ÅÜ„Çì„Å¶„Çì„Åõ„ÅÑ„Åì„ÅÜÔºÅ +${earnings}G („Éú„Éº„Éä„Çπ+${drivingBonus + bonusMoney}G)`, 'success');
        } else {
            // Â§±ÊïóÊôÇ„ÅØÂçäÈ°ç + Êãæ„Å£„Åü„ÅäÈáë
            earnings = Math.floor(baseEarnings * 0.5) + bonusMoney;
            this.showNotification(`üòÖ „ÅÜ„Çì„Å¶„Çì„Åó„Å£„Å±„ÅÑ... +${earnings}G („ÅØ„Çì„Åå„Åè+„Éú„Éº„Éä„Çπ${bonusMoney}G)`, 'warning');
        }
        
        // „ÅäÈáë„ÇíËøΩÂä†
        this.money += earnings;
        
        // Ë°®Á§∫„ÇíÊõ¥Êñ∞
        this.updateDisplay();
        this.renderTractors();
        
        // „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
        closeTractorControl();
        
        // „Ç≤„Éº„É†„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí„ÇØ„É™„Ç¢
        this.currentTractorGame = null;
    }
    
    // ÁïëË≥ºÂÖ•Ê©üËÉΩ
    buyField() {
        const fieldPrice = 500; // Áïë„ÅÆ‰æ°Ê†º
        const maxFields = 50; // ÊúÄÂ§ßÁïëÊï∞
        
        if (this.fields.length >= maxFields) {
            this.showNotification(`üö´ „ÅØ„Åü„Åë„ÅØ${maxFields}„Åì„Åæ„Åß„Åó„Åã„Åã„Åà„Åæ„Åõ„Çì`, 'warning');
            return;
        }
        
        if (this.money >= fieldPrice) {
            this.money -= fieldPrice;
            
            // Êñ∞„Åó„ÅÑÁïë„ÇíËøΩÂä†
            const newFieldId = this.fields.length;
            this.fields.push({
                id: newFieldId,
                state: 'empty',
                crop: null,
                plantTime: 0,
                growthTime: 0
            });
            
            this.showNotification(`‚úÖ „ÅÇ„Åü„Çâ„Åó„ÅÑ„ÅØ„Åü„Åë„Çí„Åì„ÅÜ„Å´„ÇÖ„ÅÜ„Åó„Åæ„Åó„ÅüÔºÅ (-${fieldPrice}G)`, 'success');
            this.updateDisplay();
            this.renderFields();
        } else {
            this.showNotification(`üí∞ „Åä„Åã„Å≠„Åå„Åü„Çä„Åæ„Åõ„ÇìÔºÅ (${fieldPrice}G „Å≤„Å§„Çà„ÅÜ)`, 'error');
        }
    }
    
    // „Éà„É©„ÇØ„Çø„ÉºË≥ºÂÖ•Ê©üËÉΩ
    buyTractor() {
        const tractorPrice = 800; // „Éà„É©„ÇØ„Çø„Éº„ÅÆ‰æ°Ê†º
        const maxTractors = 5; // ÊúÄÂ§ß„Éà„É©„ÇØ„Çø„ÉºÊï∞
        
        if (this.tractors.length >= maxTractors) {
            this.showNotification(`üö´ „Éà„É©„ÇØ„Çø„Éº„ÅØ${maxTractors}„Å†„ÅÑ„Åæ„Åß„Åó„Åã„Åã„Åà„Åæ„Åõ„Çì`, 'warning');
            return;
        }
        
        if (this.money >= tractorPrice) {
            this.money -= tractorPrice;
            
            // Êñ∞„Åó„ÅÑ„Éà„É©„ÇØ„Çø„Éº„ÇíËøΩÂä†
            const newTractorId = this.tractors.length;
            this.tractors.push({
                id: newTractorId,
                capacity: 10,
                currentLoad: 0,
                state: 'idle',
                returnTime: 0,
                roundTripTime: 8000,
                cargo: []
            });
            
            this.showNotification(`‚úÖ „ÅÇ„Åü„Çâ„Åó„ÅÑ„Éà„É©„ÇØ„Çø„Éº„Çí„Åì„ÅÜ„Å´„ÇÖ„ÅÜ„Åó„Åæ„Åó„ÅüÔºÅ (-${tractorPrice}G)`, 'success');
            this.updateDisplay();
            this.renderTractors();
        } else {
            this.showNotification(`üí∞ „Åä„Åã„Å≠„Åå„Åü„Çä„Åæ„Åõ„ÇìÔºÅ (${tractorPrice}G „Å≤„Å§„Çà„ÅÜ)`, 'error');
        }
    }
    
    // „Ç∑„Éß„ÉÉ„Éó„ÅÆÁ®ÆË°®Á§∫Ê©üËÉΩ
    renderShopSeeds() {
        const container = document.getElementById('seeds-list');
        if (!container) {
            console.log('seeds-list „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        container.innerHTML = '';
        
        // Ë≥ºÂÖ•ÂèØËÉΩ„Å™Á®Æ„ÇíË°®Á§∫
        Object.entries(this.cropData).forEach(([key, crop]) => {
            if (!this.ownedSeeds.includes(key)) {
                const seedElement = document.createElement('div');
                seedElement.className = 'shop-item';
                
                const canAfford = this.money >= crop.seedPrice;
                
                seedElement.innerHTML = `
                    <div class="item-info">
                        <h3>${crop.icon} ${crop.name}„ÅÆÁ®Æ</h3>
                        <p>ÊàêÈï∑ÊôÇÈñì: ${crop.growthTime / 1000}Áßí | Â£≤ÂÄ§: ${crop.sellPrice}G</p>
                    </div>
                    <div class="item-purchase">
                        <span class="price">${crop.seedPrice}G</span>
                        <button onclick="game.buySeed('${key}')" ${!canAfford ? 'disabled' : ''}>
                            ${canAfford ? '„Åì„ÅÜ„Å´„ÇÖ„ÅÜ' : '„Åä„Åã„Å≠„Åå„Åü„Çä„Åæ„Åõ„Çì'}
                        </button>
                    </div>
                `;
                
                container.appendChild(seedElement);
            }
        });
        
        // Ë≥ºÂÖ•ÂèØËÉΩ„Å™Á®Æ„Åå„Å™„ÅÑÂ†¥Âêà
        if (container.children.length === 0) {
            container.innerHTML = '<p class="no-items">„Åô„Åπ„Å¶„ÅÆÁ®Æ„Çí„Åó„Çá„Åò„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ</p>';
        }
        
        console.log('„Ç∑„Éß„ÉÉ„Éó„ÅÆÁ®ÆË°®Á§∫ÂÆå‰∫Ü');
    }
    
    // Á®ÆË≥ºÂÖ•Ê©üËÉΩ
    buySeed(seedKey) {
        const crop = this.cropData[seedKey];
        
        if (this.ownedSeeds.includes(seedKey)) {
            this.showNotification(`${crop.name}„ÅÆÁ®Æ„ÅØ„Åô„Åß„Å´„Åó„Çá„Åò„Åó„Å¶„ÅÑ„Åæ„Åô`, 'info');
            return;
        }
        
        if (this.money >= crop.seedPrice) {
            this.money -= crop.seedPrice;
            this.ownedSeeds.push(seedKey);
            
            this.showNotification(`üå± ${crop.name}„ÅÆÁ®Æ„Çí„Åì„ÅÜ„Å´„ÇÖ„ÅÜ„Åó„Åæ„Åó„ÅüÔºÅ (-${crop.seedPrice}G)`, 'success');
            this.updateDisplay();
            this.renderShopSeeds(); // „Ç∑„Éß„ÉÉ„ÉóË°®Á§∫„ÇíÊõ¥Êñ∞
            this.renderSeedSelector(); // Á®ÆÈÅ∏ÊäûUI„ÇÇÊõ¥Êñ∞
        } else {
            this.showNotification(`üí∞ „Åä„Åã„Å≠„Åå„Åü„Çä„Åæ„Åõ„ÇìÔºÅ (${crop.seedPrice}G „Å≤„Å§„Çà„ÅÜ)`, 'error');
        }
    }
    
    // Âä¥ÂÉçËÄÖÈõáÁî®Ê©üËÉΩ
    hireWorker(workerType) {
        console.log('ÈõáÁî®„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„ÇãÂä¥ÂÉçËÄÖ„Çø„Ç§„Éó:', workerType);
        console.log('Âà©Áî®ÂèØËÉΩ„Å™Âä¥ÂÉçËÄÖ„Çø„Ç§„Éó:', Object.keys(this.workerTypes));
        
        const workerInfo = this.workerTypes[workerType];
        if (!workerInfo) {
            console.log('Âä¥ÂÉçËÄÖÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', workerType);
            this.showNotification('‚ùå „Åµ„ÇÅ„ÅÑ„Å™„Çç„ÅÜ„Å©„ÅÜ„Åó„ÇÉ„Çø„Ç§„Éó„Åß„Åô', 'error');
            return;
        }
        
        const maxWorkers = 5; // ÊúÄÂ§ßÂä¥ÂÉçËÄÖÊï∞
        if (this.workers.length >= maxWorkers) {
            this.showNotification(`üö´ „Çç„ÅÜ„Å©„ÅÜ„Åó„ÇÉ„ÅØ${maxWorkers}„Å´„Çì„Åæ„Åß„Åó„Åã„ÇÑ„Å®„Åà„Åæ„Åõ„Çì`, 'warning');
            return;
        }
        
        if (this.money >= workerInfo.hireCost) {
            this.money -= workerInfo.hireCost;
            this.currentWorkerId++;
            
            const newWorker = {
                id: this.currentWorkerId,
                type: workerType,
                name: workerInfo.name,
                icon: workerInfo.icon,
                isActive: true,
                wageCost: workerInfo.wageCost,
                lastWorkTime: Date.now()
            };
            
            this.workers.push(newWorker);
            
            this.showNotification(`‚úÖ ${workerInfo.name}„Çí„ÇÑ„Å®„ÅÑ„Åæ„Åó„ÅüÔºÅ (-${workerInfo.hireCost}G)`, 'success');
            this.updateDisplay();
            this.renderWorkers();
        } else {
            this.showNotification(`üí∞ „Åä„Åã„Å≠„Åå„Åü„Çä„Åæ„Åõ„ÇìÔºÅ (${workerInfo.hireCost}G „Å≤„Å§„Çà„ÅÜ)`, 'error');
        }
    }
    
    // Âä¥ÂÉçËÄÖËß£ÈõáÊ©üËÉΩ
    fireWorker(workerId) {
        const workerIndex = this.workers.findIndex(w => w.id === workerId);
        if (workerIndex === -1) {
            this.showNotification('‚ùå „Çç„ÅÜ„Å©„ÅÜ„Åó„ÇÉ„Åå„Åø„Å§„Åã„Çä„Åæ„Åõ„Çì', 'error');
            return;
        }
        
        const worker = this.workers[workerIndex];
        if (confirm(`${worker.name}„Çí„Åã„ÅÑ„Åì„Åó„Åæ„Åô„ÅãÔºü`)) {
            this.workers.splice(workerIndex, 1);
            this.showNotification(`üëã ${worker.name}„Çí„Åã„ÅÑ„Åì„Åó„Åæ„Åó„Åü`, 'info');
            this.renderWorkers();
        }
    }
    
    // Âä¥ÂÉçËÄÖ„ÅÆË°®Á§∫Ê©üËÉΩ
    renderWorkers() {
        const container = document.getElementById('workers-container');
        if (!container) {
            console.log('workers-container „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        container.innerHTML = '';
        
        this.workers.forEach(worker => {
            const workerElement = document.createElement('div');
            workerElement.className = `worker ${worker.isActive ? 'active' : 'inactive'}`;
            
            const statusText = worker.isActive ? '„ÅØ„Åü„Çâ„Åç„Å°„ÇÖ„ÅÜ' : '„Åç„ÇÖ„ÅÜ„Åë„ÅÑ„Å°„ÇÖ„ÅÜ';
            const toggleButtonText = worker.isActive ? '„Åç„ÇÖ„ÅÜ„Åë„ÅÑ' : '„Åï„ÅÑ„Åã„ÅÑ';
            
            workerElement.innerHTML = `
                <div class="worker-header">
                    <span>${worker.icon} ${worker.name} #${worker.id}</span>
                    <span class="worker-status ${worker.isActive ? 'active' : 'inactive'}">${statusText}</span>
                </div>
                <div class="worker-info">
                    <p>„Åç„ÇÖ„ÅÜ„Çä„Çá„ÅÜ: ${worker.wageCost}G/„Åµ„Çì</p>
                    <p>„Åó„ÇÖ„Çã„ÅÑ: ${this.workerTypes[worker.type].description}</p>
                </div>
                <div class="worker-controls">
                    <button onclick="game.toggleWorker(${worker.id})" class="toggle-btn">
                        ${toggleButtonText}
                    </button>
                    <button onclick="game.fireWorker(${worker.id})" class="fire-btn">
                        „Åã„ÅÑ„Åì
                    </button>
                </div>
            `;
            
            container.appendChild(workerElement);
        });
        
        if (this.workers.length === 0) {
            container.innerHTML = '<p class="no-workers">„Çç„ÅÜ„Å©„ÅÜ„Åó„ÇÉ„ÅØ„ÅÑ„Åæ„Åõ„Çì</p>';
        }
        
        console.log('Âä¥ÂÉçËÄÖ„ÅÆË°®Á§∫ÂÆå‰∫Ü');
    }
    
    // Âä¥ÂÉçËÄÖ„ÅÆ‰ΩúÊ•≠Âàá„ÇäÊõø„Åà
    toggleWorker(workerId) {
        const worker = this.workers.find(w => w.id === workerId);
        if (!worker) {
            this.showNotification('‚ùå „Çç„ÅÜ„Å©„ÅÜ„Åó„ÇÉ„Åå„Åø„Å§„Åã„Çä„Åæ„Åõ„Çì', 'error');
            return;
        }
        
        worker.isActive = !worker.isActive;
        const statusText = worker.isActive ? '„Åï„ÅÑ„Åã„ÅÑ' : '„Åç„ÇÖ„ÅÜ„Åë„ÅÑ';
        this.showNotification(`${worker.icon} ${worker.name}„Åå${statusText}„Åó„Åæ„Åó„Åü`, 'info');
        this.renderWorkers();
    }
    
    // Âä¥ÂÉçËÄÖ„ÅÆËá™Âãï‰ΩúÊ•≠Âá¶ÁêÜ
    updateWorkers() {
        this.workers.forEach(worker => {
            if (worker.isActive) {
                if (worker.type === 'planter') {
                    this.autoPlantSeeds();
                } else if (worker.type === 'harvester') {
                    this.autoHarvestCrops();
                } else if (worker.type === 'driver') {
                    this.autoOperateTractors();
                }
            }
        });
    }
    
    // Ëá™ÂãïÁ®ÆÊ§ç„Åà
    autoPlantSeeds() {
        const emptyField = this.fields.find(f => f.state === 'empty');
        if (emptyField && this.ownedSeeds.length > 0) {
            const crop = this.cropData[this.selectedSeedType];
            if (this.money >= crop.seedPrice) {
                this.plantSeed(emptyField.id);
            }
        }
    }
    
    // Ëá™ÂãïÂèéÁ©´
    autoHarvestCrops() {
        const readyField = this.fields.find(f => f.state === 'ready');
        if (readyField) {
            this.harvestField(readyField.id);
        }
    }
    
    // Ëá™Âãï„Éà„É©„ÇØ„Çø„ÉºÊìç‰Ωú
    autoOperateTractors() {
        // Ê∫Ä„Çø„É≥„ÅßÂæÖÊ©ü‰∏≠„ÅÆ„Éà„É©„ÇØ„Çø„Éº„ÇíÊé¢„Åô
        const fullTractor = this.tractors.find(t => t.state === 'idle' && t.currentLoad >= t.capacity);
        if (fullTractor) {
            // Ëá™ÂãïÂá∫Ëç∑„ÇíÂÆüË°å
            this.startSimpleDelivery(fullTractor.id);
            console.log(`ÈÅãËª¢Êâã„Åå„Éà„É©„ÇØ„Çø„Éº#${fullTractor.id}„ÇíËá™ÂãïÂá∫Ëç∑„Åó„Åæ„Åó„ÅüÔºàÊ∫Ä„Çø„É≥: ${fullTractor.currentLoad}/${fullTractor.capacity}Ôºâ`);
        }
    }
    
    // Áµ¶ÊñôÊîØÊâï„ÅÑ
    payWages() {
        let totalWages = 0;
        this.workers.forEach(worker => {
            if (worker.isActive) {
                totalWages += worker.wageCost;
            }
        });
        
        if (totalWages > 0) {
            if (this.money >= totalWages) {
                this.money -= totalWages;
                this.showNotification(`üí∏ „Åç„ÇÖ„ÅÜ„Çä„Çá„ÅÜ„Çí„Åó„ÅØ„Çâ„ÅÑ„Åæ„Åó„Åü (-${totalWages}G)`, 'info');
            } else {
                // Áµ¶Êñô„ÅåÊâï„Åà„Å™„ÅÑÂ†¥Âêà„ÄÅÂä¥ÂÉçËÄÖ„Çí‰ºë„Åæ„Åõ„Çã
                this.workers.forEach(worker => {
                    if (worker.isActive) {
                        worker.isActive = false;
                    }
                });
                this.showNotification('üí∞ „Åç„ÇÖ„ÅÜ„Çä„Çá„ÅÜ„Åå„Åü„Çä„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„Çç„ÅÜ„Å©„ÅÜ„Åó„ÇÉ„Çí„Åç„ÇÖ„ÅÜ„Åë„ÅÑ„Åï„Åõ„Åæ„Åó„Åü', 'warning');
                this.renderWorkers();
            }
            this.updateDisplay();
        }
    }
}

// HTML„Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã„Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞
function toggleShop() {
    console.log('„Ç∑„Éß„ÉÉ„ÉóÂàá„ÇäÊõø„Åà');
    const modal = document.getElementById('shop-modal');
    if (modal) {
        modal.classList.toggle('active');
        
        if (modal.classList.contains('active')) {
            // „Ç∑„Éß„ÉÉ„Éó„ÅåÈñã„Åã„Çå„ÅüÊôÇ„Å´ÂïÜÂìÅ„ÇíË°®Á§∫
            game.renderShopSeeds();
        }
    }
}

function toggleGameMenu() {
    console.log('„Ç≤„Éº„É†„É°„Éã„É•„ÉºÂàá„ÇäÊõø„ÅàÔºà„ÉÜ„Çπ„ÉàÁâàÔºâ');
    const modal = document.getElementById('game-menu-modal');
    if (modal) {
        modal.classList.toggle('active');
    }
}

function toggleGameSpeed() {
    console.log('„Ç≤„Éº„É†ÈÄüÂ∫¶Âàá„ÇäÊõø„Åà');
    if (game) {
        game.toggleGameSpeed();
    }
}

function buyField() {
    console.log('ÁïëË≥ºÂÖ•');
    if (game) {
        game.buyField();
    }
}

function buyTractor() {
    console.log('„Éà„É©„ÇØ„Çø„ÉºË≥ºÂÖ•');
    if (game) {
        game.buyTractor();
    }
}

function switchTab(tabName) {
    console.log('„Çø„ÉñÂàá„ÇäÊõø„Åà:', tabName);
    // „Çø„ÉñÂàá„ÇäÊõø„Åà„É≠„Ç∏„ÉÉ„ÇØ
    const tabs = document.querySelectorAll('.shop-tab');
    const sections = document.querySelectorAll('.shop-section');
    
    tabs.forEach(tab => tab.classList.remove('active'));
    sections.forEach(section => section.classList.remove('active'));
    
    const activeTab = document.querySelector(`[onclick="switchTab('${tabName}')"]`);
    const activeSection = document.getElementById(`shop-${tabName}`);
    
    if (activeTab) activeTab.classList.add('active');
    if (activeSection) activeSection.classList.add('active');
}

// „Éà„É©„ÇØ„Çø„ÉºÊìç‰ΩúÈñ¢Êï∞
function openTractorControl(tractorId) {
    console.log('„Éà„É©„ÇØ„Çø„ÉºÊìç‰ΩúÁîªÈù¢„ÇíÈñã„Åè - ID:', tractorId);
    console.log('ÁèæÂú®„ÅÆ„Éà„É©„ÇØ„Çø„ÉºÁä∂ÊÖã:', game.tractors);
    
    // ÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„Éà„É©„ÇØ„Çø„Éº„ÇíÂèñÂæó
    const targetTractor = game.tractors.find(t => t.id === tractorId);
    console.log('ÂØæË±°„Éà„É©„ÇØ„Çø„Éº:', targetTractor);
    
    if (!targetTractor) {
        game.showNotification('üöú ÊåáÂÆö„Åï„Çå„Åü„Éà„É©„ÇØ„Çø„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'error');
        return;
    }
    
    // „Éà„É©„ÇØ„Çø„Éº„ÅåÊìç‰ΩúÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (targetTractor.state !== 'idle' || targetTractor.currentLoad <= 0) {
        game.showNotification('üöú „Åì„ÅÆ„Éà„É©„ÇØ„Çø„Éº„ÅØÊìç‰Ωú„Åß„Åç„Åæ„Åõ„ÇìÔºàÂæÖÊ©ü‰∏≠„ÅßÁ©çËºâ„ÅåÂøÖË¶Å„Åß„ÅôÔºâ', 'warning');
        return;
    }
    
    const modal = document.getElementById('tractor-control-modal');
    if (modal) {
        modal.classList.add('active');
        
        // Êó¢Â≠ò„ÅÆHTMLÊßãÈÄ†„ÇíÂà©Áî®„Åó„Å¶„ÄÅÁ∞°ÂçòÂá∫Ëç∑„Éú„Çø„É≥„ÇíËøΩÂä†
        const gameArea = modal.querySelector('.tractor-game-area');
        if (gameArea) {
            // Êó¢Â≠ò„ÅÆcanvas„ÇíÈö†„Åó„Å¶„ÄÅÁ∞°ÂçòÂá∫Ëç∑„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÇíË°®Á§∫
            const canvas = modal.querySelector('#tractor-canvas');
            const instructions = modal.querySelector('.control-instructions');
            const stats = modal.querySelector('.game-stats');
            
            if (canvas) canvas.style.display = 'none';
            if (instructions) instructions.style.display = 'none';
            if (stats) stats.style.display = 'none';
            
            // Á∞°ÂçòÂá∫Ëç∑„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Çí‰ΩúÊàê
            let deliveryInterface = modal.querySelector('.delivery-interface');
            if (!deliveryInterface) {
                deliveryInterface = document.createElement('div');
                deliveryInterface.className = 'delivery-interface';
                gameArea.appendChild(deliveryInterface);
            }
            
            deliveryInterface.innerHTML = `
                <div class="delivery-info">
                    <h3>üöú „Éà„É©„ÇØ„Çø„Éº #${targetTractor.id + 1}</h3>
                    <p><strong>„Å§„Åø„Å´:</strong> ${targetTractor.currentLoad}/${targetTractor.capacity}„Åì</p>
                    <p><strong>„Åò„Çá„ÅÜ„Åü„ÅÑ:</strong> ${targetTractor.state === 'idle' ? '„Åü„ÅÑ„Åç„Å°„ÇÖ„ÅÜ' : '„ÅÜ„Çì„Å±„Çì„Å°„ÇÖ„ÅÜ'}</p>
                    <p><strong>„Åó„ÇÖ„ÅÜ„Å´„ÇÖ„ÅÜ„Çà„Å¶„ÅÑ:</strong> ${game.calculateCargoValue(targetTractor)}G</p>
                </div>
                <div class="delivery-buttons">
                    <button onclick="game.startTractorGame(${targetTractor.id})" class="manual-delivery-btn">
                        üéÆ „Åò„Å∂„Çì„Åß„ÅÜ„Çì„Å¶„Çì
                    </button>
                    <button onclick="game.startSimpleDelivery(${targetTractor.id})" class="delivery-btn">
                        üì¶ „Åã„Çì„Åü„Çì„Åó„ÇÖ„Å£„Åã
                    </button>
                    <button onclick="closeTractorControl()" class="cancel-btn">
                        ‚ùå „Ç≠„É£„É≥„Çª„É´
                    </button>
                </div>
            `;
        }
    } else {
        console.log('„É¢„Éº„ÉÄ„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åü„ÇÅ„ÄÅÁ¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíË°®Á§∫');
        // „É¢„Éº„ÉÄ„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÁ∞°Âçò„Å™Á¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞
        const proceed = confirm(`üöú „Éà„É©„ÇØ„Çø„Éº„Åß„Åó„ÇÖ„Å£„Åã„Åó„Åæ„Åô„ÅãÔºü\n„Å§„Åø„Å´: ${targetTractor.currentLoad}„Åì\n„Åó„ÇÖ„ÅÜ„Å´„ÇÖ„ÅÜ: ${game.calculateCargoValue(targetTractor)}G`);
        if (proceed) {
            game.startSimpleDelivery(targetTractor.id);
        }
    }
}

function closeTractorControl() {
    console.log('„Éà„É©„ÇØ„Çø„ÉºÊìç‰ΩúÁîªÈù¢„ÇíÈñâ„Åò„Çã');
    const modal = document.getElementById('tractor-control-modal');
    if (modal) {
        modal.classList.remove('active');
        
        // ÂÖÉ„ÅÆË°®Á§∫„Å´Êàª„Åô
        const canvas = modal.querySelector('#tractor-canvas');
        const instructions = modal.querySelector('.control-instructions');
        const stats = modal.querySelector('.game-stats');
        const deliveryInterface = modal.querySelector('.delivery-interface');
        
        if (canvas) canvas.style.display = 'block';
        if (instructions) instructions.style.display = 'block';
        if (stats) stats.style.display = 'block';
        if (deliveryInterface) deliveryInterface.remove();
    }
}

// „É¢„Éº„ÉÄ„É´Âà∂Âæ°Èñ¢Êï∞
function closeSeedModal() {
    console.log('Á®Æ„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„ÇãÔºà„ÉÜ„Çπ„ÉàÁâàÔºâ');
    const modal = document.getElementById('seed-modal');
    if (modal) {
        modal.classList.remove('active');
    }
}

// „Ç≤„Éº„É†ÂàùÊúüÂåñ
let game;
window.addEventListener('load', () => {
    console.log('„Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
    try {
        game = new HarvestPorterGame();
        console.log('„Ç≤„Éº„É†„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàêÊàêÂäü');
    } catch (error) {
        console.error('„Ç≤„Éº„É†„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê„Ç®„É©„Éº:', error);
    }
});

// „É¢„Éº„ÉÄ„É´Â§ñ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„ÇãÂá¶ÁêÜ
document.addEventListener('DOMContentLoaded', () => {
    // „Ç∑„Éß„ÉÉ„Éó„É¢„Éº„ÉÄ„É´
    const shopModal = document.getElementById('shop-modal');
    if (shopModal) {
        shopModal.addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                toggleShop();
            }
        });
    }
    
    // „Ç≤„Éº„É†„É°„Éã„É•„Éº„É¢„Éº„ÉÄ„É´
    const gameMenuModal = document.getElementById('game-menu-modal');
    if (gameMenuModal) {
        gameMenuModal.addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                toggleGameMenu();
            }
        });
    }
    
    // Á®Æ„É¢„Éº„ÉÄ„É´
    const seedModal = document.getElementById('seed-modal');
    if (seedModal) {
        seedModal.addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                closeSeedModal();
            }
        });
    }
});

console.log('JavaScript„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');

// „Éà„É©„ÇØ„Çø„ÉºÊìç‰Ωú„Éü„Éã„Ç≤„Éº„É†
class TractorMiniGame {
    constructor(tractor, onComplete) {
        this.tractor = tractor;
        this.onComplete = onComplete;
        this.canvas = document.getElementById('tractor-canvas');
        this.ctx = this.canvas.getContext('2d');
        
        // Ë≤®Áâ©„ÅÆ‰æ°ÂÄ§„ÇíË®àÁÆó„Åó„Å¶Èõ£ÊòìÂ∫¶„ÇíË®≠ÂÆö
        this.cargoValue = game.calculateCargoValue(tractor);
        this.difficulty = this.calculateDifficulty(this.cargoValue);
        
        // „Ç≤„Éº„É†Áä∂ÊÖã
        this.isRunning = true;
        this.gameTime = Math.max(30, 60 - this.difficulty * 5); // Èõ£ÊòìÂ∫¶„Å´Âøú„Åò„Å¶ÊôÇÈñìÂà∂Èôê„ÇíË™øÊï¥
        this.currentLoad = tractor.currentLoad;
        this.maxLoad = tractor.capacity;
        
        // „Éà„É©„ÇØ„Çø„Éº„ÅÆ‰ΩçÁΩÆ„Å®Áä∂ÊÖã
        this.tractorX = 50;
        this.tractorY = 200;
        this.speed = 0;
        this.maxSpeed = Math.max(3, 5 - this.difficulty * 0.3); // Èõ£ÊòìÂ∫¶„Å´Âøú„Åò„Å¶ÊúÄÂ§ßÈÄüÂ∫¶„ÇíË™øÊï¥
        this.fuel = 100;
        this.distance = 0;
        this.targetDistance = 2000 + this.difficulty * 200; // Èõ£ÊòìÂ∫¶„Å´Âøú„Åò„Å¶Ë∑ùÈõ¢„ÇíÂª∂Èï∑
        
        // ÈöúÂÆ≥Áâ©
        this.obstacles = [];
        this.lastObstacleTime = 0;
        this.obstacleFrequency = Math.max(800, 2000 - this.difficulty * 200); // Èõ£ÊòìÂ∫¶„Å´Âøú„Åò„Å¶ÈöúÂÆ≥Áâ©È†ªÂ∫¶„ÇíË™øÊï¥
        
        // „ÅäÈáë„Ç¢„Ç§„ÉÜ„É†
        this.moneyItems = [];
        this.lastMoneyTime = 0;
        this.moneyFrequency = 3000; // 3Áßí„Åî„Å®„Å´„ÅäÈáë„Ç¢„Ç§„ÉÜ„É†ÁîüÊàê
        
        // ÂÄâÂ∫´„Å®ÈÖçÈÅîÂú∞ÁÇπÔºàÁîªÈù¢‰∏ä„ÅÆË°®Á§∫‰ΩçÁΩÆÔºâ
        this.warehouseX = 30;
        this.warehouseY = 180;
        this.deliveryX = 550;
        this.deliveryY = 180;
        
        // ÂÆüÈöõ„ÅÆ„Ç≤„Éº„É†ÈÄ≤Ë°åÔºà„Çπ„ÇØ„É≠„Éº„É´ÂäπÊûúÔºâ
        this.worldOffset = 0; // ‰∏ñÁïå„ÅÆ„Ç™„Éï„Çª„ÉÉ„Éà
        
        // „Ç¥„Éº„É´ÂÄâÂ∫´„ÅÆÂÆüÈöõ„ÅÆ‰ΩçÁΩÆ
        this.goalWarehouseX = this.targetDistance; // ÁõÆÊ®ôË∑ùÈõ¢„ÅÆ‰ΩçÁΩÆ„Å´ÈÖçÁΩÆ
        this.goalWarehouseWidth = 60;
        this.goalWarehouseHeight = 60;
        
        // ÂÖ•ÂäõÁä∂ÊÖã
        this.keys = {};
        this.mouseDown = false;
        this.touchY = null; // „Çø„ÉÉ„ÉÅ‰ΩçÁΩÆ„ÇíËøΩË∑°
        
        // Ëá™Âãï„Ç¢„ÇØ„Çª„É´Ë®≠ÂÆö
        this.autoAccel = true;
        this.accelPower = 0.15; // Ëá™Âãï„Ç¢„ÇØ„Çª„É´„ÅÆÂº∑„Åï
        
        this.init();
    }
    
    // Èõ£ÊòìÂ∫¶Ë®àÁÆóÔºàË≤®Áâ©‰æ°ÂÄ§„Å´Âü∫„Å•„ÅèÔºâ
    calculateDifficulty(cargoValue) {
        // Âü∫Ê∫ñ‰æ°Ê†º„Çí800GÔºà„Çä„Çì„Åî10ÂÄãÔºâ„Å®„Åó„ÄÅ„Åù„Çå„ÇíË∂Ö„Åà„ÇãÂàÜ„ÅßÈõ£ÊòìÂ∫¶„Çí‰∏ä„Åí„Çã
        const baseDifficulty = Math.max(0, Math.floor((cargoValue - 800) / 200));
        return Math.min(baseDifficulty, 10); // ÊúÄÂ§ßÈõ£ÊòìÂ∫¶10
    }
    
    init() {
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.handleKeyUp = this.handleKeyUp.bind(this);
        this.handleMouseMove = this.handleMouseMove.bind(this);
        this.handleTouchStart = this.handleTouchStart.bind(this);
        this.handleTouchMove = this.handleTouchMove.bind(this);
        this.handleTouchEnd = this.handleTouchEnd.bind(this);
        
        document.addEventListener('keydown', this.handleKeyDown);
        document.addEventListener('keyup', this.handleKeyUp);
        this.canvas.addEventListener('mousemove', this.handleMouseMove);
        
        // „Çø„ÉÉ„ÉÅ„Ç§„Éô„É≥„Éà„ÇíËøΩÂä†
        this.canvas.addEventListener('touchstart', this.handleTouchStart, { passive: false });
        this.canvas.addEventListener('touchmove', this.handleTouchMove, { passive: false });
        this.canvas.addEventListener('touchend', this.handleTouchEnd, { passive: false });
        
        // „Ç≤„Éº„É†„É´„Éº„Éó„ÇíÈñãÂßã
        this.gameLoop();
        
        // „Çø„Ç§„Éû„Éº„ÇíÈñãÂßã
        this.gameTimer = setInterval(() => {
            this.gameTime--;
            if (this.gameTime <= 0) {
                this.endGame(false);
            }
        }, 1000);
    }
    
    handleKeyDown(e) {
        this.keys[e.key] = true;
    }
    
    handleKeyUp(e) {
        this.keys[e.key] = false;
    }
    
    handleMouseMove(e) {
        const rect = this.canvas.getBoundingClientRect();
        const mouseY = e.clientY - rect.top;
        
        // „Éû„Ç¶„ÇπYÂ∫ßÊ®ô„Åß„Éà„É©„ÇØ„Çø„Éº„ÅÆ‰∏ä‰∏ãÁßªÂãï
        this.tractorY = Math.max(75, Math.min(325, mouseY - 15)); // ÈÅìË∑ØÂÜÖ„Å´Âà∂Èôê
    }
    
    handleTouchStart(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const rect = this.canvas.getBoundingClientRect();
        this.touchY = touch.clientY - rect.top;
        
        // ÂàùÊúü‰ΩçÁΩÆË®≠ÂÆö
        this.tractorY = Math.max(75, Math.min(325, this.touchY - 15));
    }
    
    handleTouchMove(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const rect = this.canvas.getBoundingClientRect();
        this.touchY = touch.clientY - rect.top;
        
        // „Çø„ÉÉ„ÉÅYÂ∫ßÊ®ô„Åß„Éà„É©„ÇØ„Çø„Éº„ÅÆ‰∏ä‰∏ãÁßªÂãï
        this.tractorY = Math.max(75, Math.min(325, this.touchY - 15)); // ÈÅìË∑ØÂÜÖ„Å´Âà∂Èôê
    }
    
    handleTouchEnd(e) {
        e.preventDefault();
        this.touchY = null;
    }
    
    gameLoop() {
        if (!this.isRunning) return;
        
        this.update();
        this.draw();
        
        requestAnimationFrame(() => this.gameLoop());
    }
    
    update() {
        // Ëá™Âãï„Ç¢„ÇØ„Çª„É´ÔºàÂ∏∏„Å´‰∏ÄÂÆöÈÄüÂ∫¶„ÅßÈÄ≤„ÇÄÔºâ
        if (this.autoAccel && this.fuel > 0) {
            this.speed = Math.min(this.speed + this.accelPower, this.maxSpeed);
            this.fuel = Math.max(0, this.fuel - 0.15); // ÁáÉÊñôÊ∂àË≤ª„ÇíË™øÊï¥
        } else {
            // ÁáÉÊñôÂàá„Çå„Åæ„Åü„ÅØÊâãÂãïÊìç‰ΩúÊôÇ
            if (this.keys[' '] || this.keys['ArrowUp']) {
                this.speed = Math.min(this.speed + 0.2, this.maxSpeed);
                this.fuel = Math.max(0, this.fuel - 0.2);
            } else {
                this.speed = Math.max(0, this.speed - 0.1);
            }
        }
        
        // ÁáÉÊñôÂàá„Çå„ÉÅ„Çß„ÉÉ„ÇØ
        if (this.fuel <= 0) {
            this.speed = Math.max(0, this.speed - 0.3);
        }
        
        // „Ç≠„Éº„Éú„Éº„Éâ„Åß„ÅÆ‰∏ä‰∏ãÁßªÂãïÔºà„Çø„Éñ„É¨„ÉÉ„Éà‰ª•Â§ñÁî®Ôºâ
        if (this.keys['ArrowUp'] || this.keys['w'] || this.keys['W']) {
            this.tractorY = Math.max(75, this.tractorY - 3);
        }
        if (this.keys['ArrowDown'] || this.keys['s'] || this.keys['S']) {
            this.tractorY = Math.min(325, this.tractorY + 3);
        }
        
        // Ë∑ùÈõ¢„ÇíÊõ¥Êñ∞
        this.distance += this.speed;
        this.worldOffset += this.speed;
        
        // ÈöúÂÆ≥Áâ©„ÇíÁîüÊàêÔºàÈõ£ÊòìÂ∫¶„Å´Âøú„Åò„Å¶È†ªÂ∫¶Ë™øÊï¥Ôºâ
        if (Date.now() - this.lastObstacleTime > this.obstacleFrequency) {
            this.obstacles.push({
                x: 700, // ÁîªÈù¢Âè≥Á´Ø„Åã„ÇâÁôªÂ†¥
                y: Math.random() * 200 + 100, // ÈÅìË∑ØÂÜÖ„Å´„É©„É≥„ÉÄ„É†ÈÖçÁΩÆÔºàÁØÑÂõ≤„ÇíË™øÊï¥Ôºâ
                type: ['üå≥', 'ü™®', 'üöß', 'üêÑ', 'üöó'][Math.floor(Math.random() * 5)], // ÈöúÂÆ≥Áâ©„ÅÆÁ®ÆÈ°û„ÇíÂ¢óÂä†
                width: 25,
                height: 25
            });
            this.lastObstacleTime = Date.now();
        }
        
        // „ÅäÈáë„Ç¢„Ç§„ÉÜ„É†„ÇíÁîüÊàê
        if (Date.now() - this.lastMoneyTime > this.moneyFrequency) {
            this.moneyItems.push({
                x: 700, // ÁîªÈù¢Âè≥Á´Ø„Åã„ÇâÁôªÂ†¥
                y: Math.random() * 200 + 100, // ÈÅìË∑ØÂÜÖ„Å´„É©„É≥„ÉÄ„É†ÈÖçÁΩÆ
                type: 'üí∞',
                width: 20,
                height: 20,
                value: Math.floor(Math.random() * 50) + 10 // 10-60G„É©„É≥„ÉÄ„É†
            });
            this.lastMoneyTime = Date.now();
        }
        
        // ÈöúÂÆ≥Áâ©„ÇíÁßªÂãïÔºà„Çπ„ÇØ„É≠„Éº„É´ÂäπÊûúÔºâ
        this.obstacles.forEach(obstacle => {
            obstacle.x -= this.speed + 1; // ËÉåÊôØ„Çà„ÇäÂ∞ë„ÅóÈÄü„ÅèÁßªÂãï
        });
        
        // „ÅäÈáë„Ç¢„Ç§„ÉÜ„É†„ÇíÁßªÂãï
        this.moneyItems.forEach(money => {
            money.x -= this.speed + 1;
        });
        
        // ÁîªÈù¢Â§ñ„ÅÆÈöúÂÆ≥Áâ©„ÇíÂâäÈô§
        this.obstacles = this.obstacles.filter(obstacle => obstacle.x > -50);
        
        // ÁîªÈù¢Â§ñ„ÅÆ„ÅäÈáë„Ç¢„Ç§„ÉÜ„É†„ÇíÂâäÈô§
        this.moneyItems = this.moneyItems.filter(money => money.x > -50);
        
        // Ë°ùÁ™ÅÂà§ÂÆö
        this.obstacles.forEach(obstacle => {
            if (this.checkCollision(this.tractorX, this.tractorY, 30, 30, obstacle.x, obstacle.y, obstacle.width, obstacle.height)) {
                this.currentLoad = Math.max(0, this.currentLoad - 1);
                this.speed = Math.max(0, this.speed - 1.5); // Ë°ùÁ™ÅÊôÇ„ÅÆÊ∏õÈÄü„ÇíË™øÊï¥
                this.fuel = Math.max(0, this.fuel - 3); // Ë°ùÁ™ÅÊôÇ„ÅÆÁáÉÊñô„É≠„Çπ„ÇíË™øÊï¥
                
                // ÈöúÂÆ≥Áâ©„ÇíÂâäÈô§
                const index = this.obstacles.indexOf(obstacle);
                if (index > -1) {
                    this.obstacles.splice(index, 1);
                }
                
                // Ë°ùÁ™Å„Ç®„Éï„Çß„ÇØ„ÉàÔºàÁîªÈù¢„ÇíÂ∞ë„ÅóÊè∫„Çâ„ÅôÔºâ
                this.shakeEffect = 8;
            }
        });
        
        // „ÅäÈáë„Ç¢„Ç§„ÉÜ„É†„ÅÆË°ùÁ™ÅÂà§ÂÆö
        this.moneyItems.forEach(money => {
            if (this.checkCollision(this.tractorX, this.tractorY, 30, 30, money.x, money.y, money.width, money.height)) {
                // „ÅäÈáë„ÇíÁç≤Âæó
                this.collectedMoney = (this.collectedMoney || 0) + money.value;
                
                // „ÅäÈáë„Ç¢„Ç§„ÉÜ„É†„ÇíÂâäÈô§
                const index = this.moneyItems.indexOf(money);
                if (index > -1) {
                    this.moneyItems.splice(index, 1);
                }
                
                // Áç≤Âæó„Ç®„Éï„Çß„ÇØ„Éà
                this.showMoneyEffect = 30; // 30„Éï„É¨„Éº„É†Ë°®Á§∫
                this.lastMoneyValue = money.value;
            }
        });
        
        // ÁîªÈù¢Êè∫„Çå„Ç®„Éï„Çß„ÇØ„Éà
        if (this.shakeEffect > 0) {
            this.shakeEffect--;
        }
        
        // „Ç¥„Éº„É´Âà§ÂÆöÔºà„Ç¥„Éº„É´ÂÄâÂ∫´„Å®„ÅÆË°ùÁ™ÅÂà§ÂÆöÔºâ
        const goalWarehouseScreenX = this.goalWarehouseX - this.worldOffset;
        if (goalWarehouseScreenX <= this.tractorX + 30 && goalWarehouseScreenX + this.goalWarehouseWidth >= this.tractorX) {
            // „Éà„É©„ÇØ„Çø„Éº„Åå„Ç¥„Éº„É´ÂÄâÂ∫´„Å´Âà∞ÈÅî
            if (this.tractorY + 30 >= this.warehouseY && this.tractorY <= this.warehouseY + this.goalWarehouseHeight) {
                this.endGame(true);
                return;
            }
        }
        
        // Á©çËç∑„ÅåÂÖ®ÈÉ®„Å™„Åè„Å™„Å£„Åü„ÇâÂ§±Êïó
        if (this.currentLoad <= 0) {
            this.endGame(false);
        }
    }
    
    checkCollision(x1, y1, w1, h1, x2, y2, w2, h2) {
        return x1 < x2 + w2 && x1 + w1 > x2 && y1 < y2 + h2 && y1 + h1 > y2;
    }
    
    draw() {
        // ÁîªÈù¢Êè∫„Çå„Ç®„Éï„Çß„ÇØ„Éà
        let shakeX = 0, shakeY = 0;
        if (this.shakeEffect > 0) {
            shakeX = (Math.random() - 0.5) * this.shakeEffect;
            shakeY = (Math.random() - 0.5) * this.shakeEffect;
        }
        
        this.ctx.save();
        this.ctx.translate(shakeX, shakeY);
        
        // ËÉåÊôØ„Çí„ÇØ„É™„Ç¢
        this.ctx.fillStyle = '#87CEEB';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // ÈÅìË∑Ø„ÇíÊèèÁîª
        this.ctx.fillStyle = '#666';
        this.ctx.fillRect(0, 50, this.canvas.width, 300);
        
        // ÈÅìË∑Ø„ÅÆÁ∑öÔºà„Çπ„ÇØ„É≠„Éº„É´ÂäπÊûúÔºâ
        this.ctx.strokeStyle = '#FFF';
        this.ctx.lineWidth = 3;
        this.ctx.setLineDash([20, 20]);
        const lineOffset = (this.worldOffset * 2) % 40;
        this.ctx.lineDashOffset = -lineOffset;
        this.ctx.beginPath();
        this.ctx.moveTo(0, 200);
        this.ctx.lineTo(this.canvas.width, 200);
        this.ctx.stroke();
        this.ctx.setLineDash([]);
        
        // ËÉåÊôØ„ÅÆÊú®„ÄÖÔºàÈÅ†ÊôØÂäπÊûúÔºâ
        for (let i = 0; i < 10; i++) {
            const treeX = (i * 80 - (this.worldOffset * 0.3)) % (this.canvas.width + 100);
            if (treeX > -50) {
                this.ctx.font = '16px Arial';
                this.ctx.fillText('üå≤', treeX, 40);
                this.ctx.fillText('üå≤', treeX, 380);
            }
        }
        
        // „Çπ„Çø„Éº„ÉàÂú∞ÁÇπ„ÅÆÂÄâÂ∫´ÔºàÊúÄÂàù„Å†„ÅëË°®Á§∫Ôºâ
        if (this.distance < 100) {
            const warehouseX = this.warehouseX - this.worldOffset;
            if (warehouseX > -50) {
                this.ctx.fillStyle = '#8B4513';
                this.ctx.fillRect(warehouseX, this.warehouseY, 40, 40);
                this.ctx.fillStyle = '#000';
                this.ctx.font = '12px Arial';
                this.ctx.fillText('„Çπ„Çø„Éº„Éà', warehouseX + 5, this.warehouseY - 5);
            }
        }
        
        // „Ç¥„Éº„É´ÂÄâÂ∫´„ÇíÊèèÁîªÔºàÂ∏∏„Å´Ë°®Á§∫„ÄÅËøë„Å•„Åè„Å®Â§ß„Åç„ÅèË°®Á§∫Ôºâ
        const goalWarehouseScreenX = this.goalWarehouseX - this.worldOffset;
        const distanceToGoal = this.targetDistance - this.distance;
        
        if (goalWarehouseScreenX > -100 && goalWarehouseScreenX < this.canvas.width + 50) {
            // „Ç¥„Éº„É´ÂÄâÂ∫´„ÅåÁîªÈù¢ÂÜÖ„Å´„ÅÇ„ÇãÂ†¥Âêà
            const warehouseSize = Math.min(60, Math.max(40, 100 - distanceToGoal / 20)); // Ëøë„Å•„Åè„Å®Â§ß„Åç„Åè„Å™„Çã
            
            // ÂÄâÂ∫´„ÅÆÂΩ±
            this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            this.ctx.fillRect(goalWarehouseScreenX + 5, this.warehouseY + 5, warehouseSize, warehouseSize);
            
            // ÂÄâÂ∫´Êú¨‰Ωì
            this.ctx.fillStyle = '#8B4513';
            this.ctx.fillRect(goalWarehouseScreenX, this.warehouseY, warehouseSize, warehouseSize);
            
            // ÂÄâÂ∫´„ÅÆÂ±ãÊ†π
            this.ctx.fillStyle = '#A0522D';
            this.ctx.beginPath();
            this.ctx.moveTo(goalWarehouseScreenX - 5, this.warehouseY);
            this.ctx.lineTo(goalWarehouseScreenX + warehouseSize/2, this.warehouseY - 15);
            this.ctx.lineTo(goalWarehouseScreenX + warehouseSize + 5, this.warehouseY);
            this.ctx.fill();
            
            // ÂÄâÂ∫´„ÅÆ„Éâ„Ç¢
            this.ctx.fillStyle = '#654321';
            this.ctx.fillRect(goalWarehouseScreenX + warehouseSize/3, this.warehouseY + warehouseSize/3, warehouseSize/3, warehouseSize*2/3);
            
            // „Ç¥„Éº„É´„ÉÜ„Ç≠„Çπ„Éà
            this.ctx.fillStyle = '#000';
            this.ctx.font = 'bold 14px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText('üèÅ „Ç¥„Éº„É´', goalWarehouseScreenX + warehouseSize/2, this.warehouseY - 20);
            
            // Ë∑ùÈõ¢„ÅåËøë„ÅÑÂ†¥Âêà„ÅØÁü¢Âç∞„ÇíË°®Á§∫
            if (distanceToGoal < 200) {
                this.ctx.fillStyle = '#FF4500';
                this.ctx.font = '20px Arial';
                this.ctx.fillText('‚Üí', goalWarehouseScreenX - 30, this.warehouseY + warehouseSize/2);
            }
            
            this.ctx.textAlign = 'left'; // „ÉÜ„Ç≠„Çπ„ÉàÈÖçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
        } else if (distanceToGoal < 500) {
            // „Ç¥„Éº„É´ÂÄâÂ∫´„ÅåÁîªÈù¢Â§ñ„Åß„ÇÇËøë„ÅÑÂ†¥Âêà„ÅØÊñπÂêë„ÇíÁ§∫„Åô
            this.ctx.fillStyle = '#FF4500';
            this.ctx.font = 'bold 16px Arial';
            this.ctx.fillText(`„Ç¥„Éº„É´„Åæ„Åß ${Math.floor(distanceToGoal)}m ‚Üí`, this.canvas.width - 200, 50);
        }
        
        // „Éà„É©„ÇØ„Çø„Éº„ÇíÊèèÁîªÔºàÁîªÈù¢‰∏≠Â§ÆÂõ∫ÂÆöÔºâ
        this.ctx.fillStyle = '#00FF00';
        this.ctx.fillRect(this.tractorX, this.tractorY, 30, 30);
        this.ctx.fillStyle = '#000';
        this.ctx.font = '20px Arial';
        this.ctx.fillText('üöú', this.tractorX + 2, this.tractorY + 22);
        
        // Á©çËç∑„ÇíË°®Á§∫
        this.ctx.fillStyle = '#000';
        this.ctx.font = '12px Arial';
        this.ctx.fillText(`„Å§„Åø„Å´: ${this.currentLoad}`, this.tractorX - 5, this.tractorY - 5);
        
        // ÈöúÂÆ≥Áâ©„ÇíÊèèÁîª
        this.obstacles.forEach(obstacle => {
            this.ctx.font = '20px Arial';
            this.ctx.fillText(obstacle.type, obstacle.x, obstacle.y + 20);
        });
        
        // „ÅäÈáë„Ç¢„Ç§„ÉÜ„É†„ÇíÊèèÁîª
        this.moneyItems.forEach(money => {
            this.ctx.font = '16px Arial';
            this.ctx.fillText(money.type, money.x, money.y + 16);
        });
        
        // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº
        const progressPercent = this.distance / this.targetDistance;
        const progressWidth = (this.canvas.width - 40) * progressPercent;
        this.ctx.fillStyle = '#333';
        this.ctx.fillRect(20, 10, this.canvas.width - 40, 20);
        this.ctx.fillStyle = progressPercent > 0.8 ? '#4CAF50' : '#2196F3';
        this.ctx.fillRect(20, 10, progressWidth, 20);
        
        // „Ç≤„Éº„É†ÊÉÖÂ†±„ÇíË°®Á§∫
        this.ctx.fillStyle = '#FFF';
        this.ctx.font = '14px Arial';
        this.ctx.fillRect(10, 35, 220, 130);
        this.ctx.fillStyle = '#000';
        this.ctx.fillText(`„ÅÆ„Åì„Çä„Åò„Åã„Çì: ${this.gameTime}„Å≥„Çá„ÅÜ`, 15, 50);
        
        // distanceToGoal„ÅØÊó¢„Å´‰∏ä„ÅßÂÆ£Ë®Ä„Åï„Çå„Å¶„ÅÑ„Çã„ÅÆ„ÅßÂÜçÂÆ£Ë®Ä„Åó„Å™„ÅÑ
        this.ctx.fillText(`„Ç¥„Éº„É´„Åæ„Åß: ${Math.floor(distanceToGoal)}m`, 15, 65);
        
        this.ctx.fillText(`„Å≠„Çì„Çä„Çá„ÅÜ: ${Math.floor(this.fuel)}%`, 15, 80);
        this.ctx.fillText(`„Åù„Åè„Å©: ${Math.floor(this.speed * 10)}km/h`, 15, 95);
        this.ctx.fillText(`„Å§„Åø„Å´: ${this.currentLoad}/${this.maxLoad}`, 15, 110);
        this.ctx.fillText(`„Å™„Çì„ÅÑ„Å©: ${this.difficulty}`, 15, 125);
        this.ctx.fillText(`„Åó„ÇÖ„ÅÜ„Å´„ÇÖ„ÅÜ: ${this.cargoValue}G`, 15, 140);
        if (this.collectedMoney > 0) {
            this.ctx.fillText(`„Éú„Éº„Éä„Çπ: +${this.collectedMoney}G`, 15, 155);
        }
        
        // „Ç¥„Éº„É´„ÅåËøë„ÅÑÂ†¥Âêà„ÅØÁâπÂà•„Å™Ë°®Á§∫
        if (distanceToGoal < 100) {
            this.ctx.fillStyle = '#FF4500';
            this.ctx.font = 'bold 16px Arial';
            this.ctx.fillText('üèÅ „Ç¥„Éº„É´„Å°„Åã„ÅèÔºÅ', 15, 170);
        }
        
        // „ÅäÈáëÁç≤Âæó„Ç®„Éï„Çß„ÇØ„Éà
        if (this.showMoneyEffect > 0) {
            this.ctx.fillStyle = '#FFD700';
            this.ctx.font = 'bold 18px Arial';
            this.ctx.fillText(`+${this.lastMoneyValue}G!`, this.tractorX + 35, this.tractorY - 10);
            this.showMoneyEffect--;
        }
        
        this.ctx.restore();
    }
    
    endGame(success) {
        this.isRunning = false;
        
        if (this.gameTimer) {
            clearInterval(this.gameTimer);
        }
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÂâäÈô§
        document.removeEventListener('keydown', this.handleKeyDown);
        document.removeEventListener('keyup', this.handleKeyUp);
        this.canvas.removeEventListener('mousemove', this.handleMouseMove);
        this.canvas.removeEventListener('touchstart', this.handleTouchStart);
        this.canvas.removeEventListener('touchmove', this.handleTouchMove);
        this.canvas.removeEventListener('touchend', this.handleTouchEnd);
        
        // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÂëº„Å≥Âá∫„ÅóÔºàÁç≤Âæó„Åó„Åü„ÅäÈáë„ÇÇÂê´„ÇÅ„ÇãÔºâ
        this.onComplete(success, this.currentLoad, this.collectedMoney || 0);
    }
}
